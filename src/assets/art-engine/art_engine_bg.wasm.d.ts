/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_engine_free(a: number): void;
export function engine_new(a: number, b: number): void;
export function engine_resize(a: number, b: number): void;
export function engine_clear(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function engine_create_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function engine_create_shader(a: number, b: number, c: number, d: number, e: number): void;
export function engine_create_compute_material(a: number, b: number, c: number, d: number, e: number): void;
export function engine_create_material(a: number, b: number, c: number): void;
export function engine_create_camera(a: number, b: number, c: number): number;
export function __wbg_transform_free(a: number): void;
export function transform_new(): number;
export function transform_get_position(a: number, b: number): void;
export function transform_translate(a: number, b: number, c: number, d: number): void;
export function transform_set_position(a: number, b: number, c: number, d: number): void;
export function transform_scale(a: number, b: number, c: number, d: number): void;
export function transform_get_scale(a: number, b: number): void;
export function transform_set_euleur_angles(a: number, b: number, c: number, d: number): void;
export function transform_get_euleur_angles(a: number, b: number): void;
export function transform_get_matrix(a: number, b: number): void;
export function __wbg_camera_free(a: number): void;
export function camera_new(a: number, b: number): number;
export function camera_resize(a: number, b: number, c: number): void;
export function camera_get_matrix(a: number, b: number): void;
export function camera_get_position(a: number, b: number): void;
export function camera_translate(a: number, b: number, c: number, d: number): void;
export function camera_set_position(a: number, b: number, c: number, d: number): void;
export function camera_scale(a: number, b: number, c: number, d: number): void;
export function camera_get_scale(a: number, b: number): void;
export function camera_set_euleur_angles(a: number, b: number, c: number, d: number): void;
export function camera_get_euleur_angles(a: number, b: number): void;
export function camera_get_projection_view(a: number, b: number): void;
export function camera_get_view_matrix(a: number, b: number): void;
export function camera_lerp_rotation(a: number, b: number, c: number, d: number, e: number): void;
export function camera_lerp_position(a: number, b: number, c: number, d: number, e: number): void;
export function run(a: number, b: number): void;
export function __wbg_material_free(a: number): void;
export function material_new(a: number, b: number, c: number): void;
export function material_bind(a: number): void;
export function material_unbind(a: number): void;
export function material_bind_buffer(a: number, b: number, c: number, d: number, e: number): void;
export function material_set_uniform(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function material_draw(a: number): void;
export function material_draw_instanced(a: number, b: number): void;
export function __wbg_computematerial_free(a: number): void;
export function computematerial_new(a: number, b: number, c: number, d: number, e: number): void;
export function computematerial_bind(a: number): void;
export function computematerial_unbind(a: number): void;
export function computematerial_bind_buffer(a: number, b: number, c: number, d: number): void;
export function computematerial_set_uniform(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function computematerial_compute(a: number, b: number): void;
export function __wbg_shader_free(a: number): void;
export function shader_new(a: number, b: number, c: number, d: number, e: number): void;
export function shader_raw_vertex_shader(a: number): number;
export function shader_raw_fragment_shader(a: number): number;
export function shader_get_type(a: number): number;
export function __wbg_bufferdatalayoutdescriptor_free(a: number): void;
export function bufferdatalayoutdescriptor_new(a: number, b: number, c: number, d: number, e: number): number;
export function __wbg_bufferdatadescriptor_free(a: number): void;
export function bufferdatadescriptor_new(a: number, b: number, c: number, d: number): number;
export function bufferdatadescriptor_get_element_size(a: number): number;
export function bufferdatadescriptor_get_size(a: number): number;
export function __wbg_buffer_free(a: number): void;
export function buffer_new(a: number, b: number, c: number, d: number, e: number): void;
export function buffer_get_type(a: number): number;
export function buffer_get_usage(a: number): number;
export function buffer_bind(a: number): void;
export function buffer_unbind(a: number): void;
export function buffer_get_layout(a: number, b: number): void;
export function buffer_get_size(a: number): number;
export function buffer_get_element_size(a: number): number;
export function buffer_raw(a: number): number;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function wasm_bindgen__convert__closures__invoke1_mut__ha32a076da23608f6(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
